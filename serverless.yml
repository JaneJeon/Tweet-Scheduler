service: tweet-scheduler

provider:
  name: aws
  stage: dev
  runtime: nodejs8.10
  memorySize: 128
  timeout: 3
  logRetentionInDays: 14
  deploymentBucket:
    serverSideEncryption: AES256
  environment:
    JWT_SECRET: ${self:custom.env.JWT_SECRET}
    CONSUMER_KEY: ${self:custom.env.CONSUMER_KEY}
    CONSUMER_SECRET: ${self:custom.env.CONSUMER_SECRET}
    TWEETS_TABLE: ${self:service}-${self:provider.stage}
    TWEET_TIME_INDEX: tweetTime-global-index
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        Fn::GetAtt:
          - TweetsTable
          - Arn

package:
  include:
    - config/**
  individually: true

functions:
  signIn:
    handler: src/functions/signIn.handler
    events:
      - http:
          method: POST
          path: /session
  logout:
    handler: src/functions/logout.handler
    events:
      - http:
          method: DELETE
          path: /session
  getTweets:
    handler: src/functions/getTweets.handler
    events:
      - http:
          method: GET
          path: /tweets
  createTweet:
    handler: src/functions/createTweet.handler
    events:
      - http:
          method: POST
          path: /tweets
  updateTweet:
    handler: src/functions/updateTweet.handler
    events:
      - http:
          method: PUT
          path: /tweets/{tweetId}
  deleteTweet:
    handler: src/functions/deleteTweet.handler
    events:
      - http:
          method: DELETE
          path: /tweets/{tweetId}
  # scrapeTweets:
  #   handler: src/functions/scrapeTweets.handler
  #   events:
  #     - schedule: rate(1 minute)
  #   memorySize: 512
  #   timeout: 60
  # postTweets:
  #   handler: src/functions/postTweets.handler
  #   events:
  #     - sqs:
  #         arn:
  #           Fn::GetAtt:
  #             - TweetQueue
  #             - Arn
  #   timeout: 60

resources:
  Resources:
    TweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TWEETS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
          - AttributeName: tweetTime
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: tweetTime
          Enabled: true
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TWEET_TIME_INDEX}
            KeySchema:
              - AttributeName: tweetTime
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # TweetQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:service}-${self:provider.stage}-queue
    LogBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config.logBucket}
        AccessControl: LogDeliveryWrite
        LifecycleConfiguration:
          Rules:
            - Transitions:
                - StorageClass: STANDARD_IA
                  TransitionInDays: 30
              Status: Enabled

custom:
  env: ${file(./config/backend.yml):environment}
  config: ${file(./config/backend.yml):${self:provider.stage}}
  fullstack:
    bucketName: ${self:custom.config.siteBucket}
    distributionFolder: src/public
    indexDocument: login.html
    clientCommand: node_modules/.bin/browserify src/client/index.js | node_modules/.bin/uglifyjs > src/public/client.js
    logging:
      bucket:
        Fn::GetAtt:
          - LogBucket
          - DomainName
  capacities:
    - table: TweetsTable
      index:
        - ${self:provider.environment.TWEET_TIME_INDEX}
      read:
        minimum: 1
        maximum: 5
        usage: 0.75
      write:
        minimum: 1
        maximum: 5
        usage: 0.75
  prune:
    automatic: true
    number: 3
  # alerts:
  #   topics:
  #     alarm:
  #       topic: ${self:service}-${self:provider.stage}-alerts-alarm
  #       notifications:
  #         - protocol: email
  #           endpoint: ${self:custom.config.notificationEmail}

# alerts:
#   alarms:
#     - functionErrors

plugins:
  - serverless-prune-plugin
  - serverless-plugin-optimize
  - serverless-plugin-aws-alerts
  - serverless-dynamodb-autoscaling
  - fullstack-serverless
